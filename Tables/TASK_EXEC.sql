CREATE TABLE TASK_EXEC 
(
  TASK_EXEC_ID         NUMBER NOT NULL
, TASK_ID              NUMBER NOT NULL 
, STATUS               VARCHAR2(1) DEFAULT 'R' NOT NULL  --RUNNING, FAIL, COMPLETE
, COLLECTION_STARTED   TIMESTAMP(6) NOT NULL
, COLLECTION_COMPLETED TIMESTAMP(6)
, COLLECTION_DURATION  INTERVAL DAY(2) TO SECOND(6)
, ROWS_PROCESSED       NUMBER
, NOTES                VARCHAR2(200)
, JOB_EXEC_ID          NUMBER
)
;

CREATE UNIQUE INDEX TASK_EXEC_UK01 ON TASK_EXEC
(TASK_ID, COLLECTION_STARTED);

CREATE UNIQUE INDEX TASK_EXEC_PK ON TASK_EXEC
(TASK_EXEC_ID);

ALTER TABLE TASK_EXEC ADD (
  CONSTRAINT TASK_EXEC_CK01
  CHECK (STATUS IN ('R','F','C')
        )
  ENABLE VALIDATE,
  CONSTRAINT TASK_EXEC_PK
  PRIMARY KEY
  (TASK_EXEC_ID)
  USING INDEX TASK_EXEC_PK
  ENABLE VALIDATE);

COMMENT ON COLUMN TASK_EXEC.JOB_EXEC_ID IS 'Optional FK to JOB_EXEC ';

SET DEFINE OFF;

CREATE OR REPLACE TRIGGER TASK_EXEC_TG_BIU
     BEFORE INSERT OR UPDATE
    ON TASK_EXEC
    REFERENCING NEW AS NEW OLD AS OLD
    FOR EACH ROW
DECLARE
BEGIN
   CASE 
   WHEN INSERTING THEN
      IF :NEW.TASK_EXEC_ID IS NULL THEN
         :NEW.TASK_EXEC_ID := TASK_EXEC_SEQ.NEXTVAL;
       END IF;

       IF :NEW.COLLECTION_STARTED IS NULL THEN
         :NEW.COLLECTION_STARTED := CAST(SYSTIMESTAMP AS TIMESTAMP);
       END IF;

     UPDATE TASK
     SET 
         PREV_RUNDATE = CURR_RUNDATE
       , PREV_TASK_EXEC_ID  = CURR_TASK_EXEC_ID
       , CURR_RUNDATE = :NEW.COLLECTION_STARTED
       , CURR_TASK_EXEC_ID  = :NEW.TASK_EXEC_ID
       , STATUS = :NEW.STATUS
     WHERE TASK_ID = :NEW.TASK_ID;

   WHEN UPDATING THEN
     UPDATE TASK
     SET 
         STATUS = :NEW.STATUS
     WHERE TASK_ID = :NEW.TASK_ID;

   END CASE;
  
END TASK_EXEC_TG_BIU; 
/

SET DEFINE ON;

/*
ALTER TABLE TASK_EXEC ADD
(NOTES VARCHAR2(200)
);
*/
  