CREATE TABLE JOB_EXEC 
(
  JOB_EXEC_ID          NUMBER                  NOT NULL
, JOB_ID               NUMBER                  NOT NULL 
, JOB_STATUS           VARCHAR2(1) DEFAULT 'R' NOT NULL  --RUNNING, FAIL, COMPLETE
, START_WITH_TASK_NAME VARCHAR2(100)           NOT NULL
, STOP_AFTER_TASK_NAME VARCHAR2(100)           NOT NULL
, JOB_STARTED          TIMESTAMP(6)            NOT NULL
, JOB_COMPLETED        TIMESTAMP(6)
, JOB_DURATION         INTERVAL DAY(2) TO SECOND(6)
, NOTES                VARCHAR2(200)
, CONSTRAINT JOB_EXEC_CK01 CHECK (JOB_STATUS IN ('R','F','C')     ) ENABLE VALIDATE
, CONSTRAINT JOB_EXEC_PK   PRIMARY KEY (JOB_EXEC_ID)
     USING INDEX
     ENABLE VALIDATE
, CONSTRAINT JOB_EXEC_UK01 UNIQUE      (JOB_ID, JOB_STARTED)
     USING INDEX
     ENABLE VALIDATE
, CONSTRAINT JOB_EXEC_FK1
     FOREIGN KEY (JOB_ID)
     REFERENCES JOB (JOB_ID)
     ON DELETE CASCADE
)
;

SET DEFINE OFF;

CREATE OR REPLACE TRIGGER JOB_EXEC_TG_BIU
    BEFORE INSERT OR UPDATE
    ON JOB_EXEC
    REFERENCING NEW AS NEW OLD AS OLD
    FOR EACH ROW
DECLARE
BEGIN
   CASE 
   WHEN INSERTING THEN
      IF :NEW.JOB_EXEC_ID IS NULL THEN
         :NEW.JOB_EXEC_ID := JOB_EXEC_SEQ.NEXTVAL;
       END IF;

       IF :NEW.JOB_STARTED IS NULL THEN
         :NEW.JOB_STARTED := CAST(SYSTIMESTAMP AS TIMESTAMP);
       END IF;

     UPDATE JOB
     SET 
         PREV_RUNDATE      = CURR_RUNDATE
       , PREV_JOB_EXEC_ID  = CURR_JOB_EXEC_ID
       , CURR_RUNDATE      = :NEW.JOB_STARTED
       , CURR_JOB_EXEC_ID  = :NEW.JOB_EXEC_ID
       , JOB_STATUS            = :NEW.JOB_STATUS
     WHERE JOB_ID = :NEW.JOB_ID;

   WHEN UPDATING THEN
     UPDATE JOB
     SET 
         JOB_STATUS = :NEW.JOB_STATUS
     WHERE JOB_ID = :NEW.JOB_ID;

   END CASE;

END JOB_EXEC_TG_BIU; 
/

SET DEFINE ON;
