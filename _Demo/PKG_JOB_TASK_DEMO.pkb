CREATE OR REPLACE PACKAGE BODY PKG_JOB_TASK_DEMO
AS
   c_end_of_proc_sleep_secs  CONSTANT NUMBER := 5;
   
PROCEDURE setup_p
IS 
BEGIN
   FOR rec_table IN (SELECT * FROM USER_TABLES WHERE TABLE_NAME LIKE 'JOB_TASK_DEMO_TAB%')
   LOOP
      EXECUTE IMMEDIATE 'DROP TABLE '||REC_TABLE.TABLE_NAME||' PURGE';
   END LOOP;
   
   EXECUTE IMMEDIATE Q'{CREATE TABLE job_task_demo_tab01 AS SELECT * FROM ALL_OBJECTS}';
   EXECUTE IMMEDIATE Q'{CREATE TABLE job_task_demo_tab02 AS SELECT * FROM ALL_TABLES}';
   EXECUTE IMMEDIATE 
Q'{CREATE TABLE job_task_demo_tab03 
AS 
SELECT 
  OWNER
, TABLE_NAME
, COLUMN_NAME
, DATA_TYPE
, DATA_TYPE_MOD
, DATA_TYPE_OWNER
, DATA_LENGTH
, DATA_PRECISION
, DATA_SCALE
, NULLABLE
, COLUMN_ID
, DEFAULT_LENGTH
--, DATA_DEFAULT
, NUM_DISTINCT
, LOW_VALUE
, HIGH_VALUE
, DENSITY
, NUM_NULLS
, NUM_BUCKETS
, LAST_ANALYZED
, SAMPLE_SIZE
, CHARACTER_SET_NAME
, CHAR_COL_DECL_LENGTH
, GLOBAL_STATS
, USER_STATS
, AVG_COL_LEN
, CHAR_LENGTH
, CHAR_USED
, V80_FMT_IMAGE
, DATA_UPGRADED
, HISTOGRAM
FROM ALL_TAB_COLUMNS
}';

   EXECUTE IMMEDIATE 
Q'{CREATE TABLE JOB_TASK_DEMO_TAB04
AS
SELECT JOB_TASK_DEMO_TAB02.*, T3.COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB02
  LEFT
  JOIN (
SELECT OWNER, TABLE_NAME, COUNT(*) AS COLUMN_COUNT
FROM JOB_TASK_DEMO_TAB03
GROUP BY OWNER, TABLE_NAME
  ) T3
   ON JOB_TASK_DEMO_TAB02.OWNER = T3.OWNER
  AND JOB_TASK_DEMO_TAB02.TABLE_NAME = T3.TABLE_NAME
}';

   EXECUTE IMMEDIATE 
Q'{CREATE TABLE JOB_TASK_DEMO_TAB05
AS
SELECT T1.*
     , T4.COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB01 T1
  LEFT
  JOIN JOB_TASK_DEMO_TAB04 T4
    ON T1.OWNER = T4.OWNER
   AND T1.OBJECT_NAME = T4.TABLE_NAME
   AND T1.OBJECT_TYPE = 'TABLE'
}';


   EXECUTE IMMEDIATE 
Q'{CREATE TABLE JOB_TASK_DEMO_TAB06
AS
SELECT OWNER
     , COUNT(*) AS ROW_CNT
     , COUNT(DISTINCT TABLE_NAME) AS TABLE_CNT
     , SUM(COLUMN_COUNT) COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB04
 GROUP BY OWNER
}';


   EXECUTE IMMEDIATE 
Q'{CREATE TABLE JOB_TASK_DEMO_TAB07
AS
SELECT TABLESPACE_NAME
     , SUM(COLUMN_COUNT) AS COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB04
GROUP BY TABLESPACE_NAME
}';


END setup_p;
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------


  --PROCEDURES
PROCEDURE job_task_demo_tab01_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab01';
   
   EXECUTE IMMEDIATE 
Q'{INSERT 
  INTO job_task_demo_tab01
( OWNER
, OBJECT_NAME
, SUBOBJECT_NAME
, OBJECT_ID
, DATA_OBJECT_ID
, OBJECT_TYPE
, CREATED
, LAST_DDL_TIME
, TIMESTAMP
, STATUS
, TEMPORARY
, GENERATED
, SECONDARY
, NAMESPACE
, EDITION_NAME )
SELECT 
  OWNER
, OBJECT_NAME
, SUBOBJECT_NAME
, OBJECT_ID
, DATA_OBJECT_ID
, OBJECT_TYPE
, CREATED
, LAST_DDL_TIME
, TIMESTAMP
, STATUS
, TEMPORARY
, GENERATED
, SECONDARY
, NAMESPACE
, EDITION_NAME
FROM ALL_OBJECTS
WHERE 1=1 }';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB01"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);

END job_task_demo_tab01_p;


PROCEDURE job_task_demo_tab02_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab02';
   
   EXECUTE IMMEDIATE 
Q'{INSERT 
  INTO job_task_demo_tab02
(  
  OWNER
, TABLE_NAME
, TABLESPACE_NAME
, CLUSTER_NAME
, IOT_NAME
, STATUS
, PCT_FREE
, PCT_USED
, INI_TRANS
, MAX_TRANS
, INITIAL_EXTENT
, NEXT_EXTENT
, MIN_EXTENTS
, MAX_EXTENTS
, PCT_INCREASE
, FREELISTS
, FREELIST_GROUPS
, LOGGING
, BACKED_UP
, NUM_ROWS
, BLOCKS
, EMPTY_BLOCKS
, AVG_SPACE
, CHAIN_CNT
, AVG_ROW_LEN
, AVG_SPACE_FREELIST_BLOCKS
, NUM_FREELIST_BLOCKS
, DEGREE
, INSTANCES
, CACHE
, TABLE_LOCK
, SAMPLE_SIZE
, LAST_ANALYZED
, PARTITIONED
, IOT_TYPE
, TEMPORARY
, SECONDARY
, NESTED
, BUFFER_POOL
, FLASH_CACHE
, CELL_FLASH_CACHE
, ROW_MOVEMENT
, GLOBAL_STATS
, USER_STATS
, DURATION
, SKIP_CORRUPT
, MONITORING
, CLUSTER_OWNER
, DEPENDENCIES
, COMPRESSION
, COMPRESS_FOR
)
SELECT 
  OWNER
, TABLE_NAME
, TABLESPACE_NAME
, CLUSTER_NAME
, IOT_NAME
, STATUS
, PCT_FREE
, PCT_USED
, INI_TRANS
, MAX_TRANS
, INITIAL_EXTENT
, NEXT_EXTENT
, MIN_EXTENTS
, MAX_EXTENTS
, PCT_INCREASE
, FREELISTS
, FREELIST_GROUPS
, LOGGING
, BACKED_UP
, NUM_ROWS
, BLOCKS
, EMPTY_BLOCKS
, AVG_SPACE
, CHAIN_CNT
, AVG_ROW_LEN
, AVG_SPACE_FREELIST_BLOCKS
, NUM_FREELIST_BLOCKS
, DEGREE
, INSTANCES
, CACHE
, TABLE_LOCK
, SAMPLE_SIZE
, LAST_ANALYZED
, PARTITIONED
, IOT_TYPE
, TEMPORARY
, SECONDARY
, NESTED
, BUFFER_POOL
, FLASH_CACHE
, CELL_FLASH_CACHE
, ROW_MOVEMENT
, GLOBAL_STATS
, USER_STATS
, DURATION
, SKIP_CORRUPT
, MONITORING
, CLUSTER_OWNER
, DEPENDENCIES
, COMPRESSION
, COMPRESS_FOR
FROM ALL_TABLES
WHERE 1=1 }';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB02"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);


END job_task_demo_tab02_p;


PROCEDURE job_task_demo_tab03_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab03';
   
   EXECUTE IMMEDIATE 
Q'{INSERT 
  INTO job_task_demo_tab03
(  
  OWNER
, TABLE_NAME
, COLUMN_NAME
, DATA_TYPE
, DATA_TYPE_MOD
, DATA_TYPE_OWNER
, DATA_LENGTH
, DATA_PRECISION
, DATA_SCALE
, NULLABLE
, COLUMN_ID
, DEFAULT_LENGTH
--, DATA_DEFAULT
, NUM_DISTINCT
, LOW_VALUE
, HIGH_VALUE
, DENSITY
, NUM_NULLS
, NUM_BUCKETS
, LAST_ANALYZED
, SAMPLE_SIZE
, CHARACTER_SET_NAME
, CHAR_COL_DECL_LENGTH
, GLOBAL_STATS
, USER_STATS
, AVG_COL_LEN
, CHAR_LENGTH
, CHAR_USED
, V80_FMT_IMAGE
, DATA_UPGRADED
, HISTOGRAM
)
SELECT 
  OWNER
, TABLE_NAME
, COLUMN_NAME
, DATA_TYPE
, DATA_TYPE_MOD
, DATA_TYPE_OWNER
, DATA_LENGTH
, DATA_PRECISION
, DATA_SCALE
, NULLABLE
, COLUMN_ID
, DEFAULT_LENGTH
--, DATA_DEFAULT
, NUM_DISTINCT
, LOW_VALUE
, HIGH_VALUE
, DENSITY
, NUM_NULLS
, NUM_BUCKETS
, LAST_ANALYZED
, SAMPLE_SIZE
, CHARACTER_SET_NAME
, CHAR_COL_DECL_LENGTH
, GLOBAL_STATS
, USER_STATS
, AVG_COL_LEN
, CHAR_LENGTH
, CHAR_USED
, V80_FMT_IMAGE
, DATA_UPGRADED
, HISTOGRAM
FROM ALL_TAB_COLUMNS
WHERE 1=1 }';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB03"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);


END job_task_demo_tab03_p;


PROCEDURE job_task_demo_tab04_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab04';
   
   EXECUTE IMMEDIATE 
Q'{INSERT 
  INTO job_task_demo_tab04
(  
  OWNER
, TABLE_NAME
, TABLESPACE_NAME
, CLUSTER_NAME
, IOT_NAME
, STATUS
, PCT_FREE
, PCT_USED
, INI_TRANS
, MAX_TRANS
, INITIAL_EXTENT
, NEXT_EXTENT
, MIN_EXTENTS
, MAX_EXTENTS
, PCT_INCREASE
, FREELISTS
, FREELIST_GROUPS
, LOGGING
, BACKED_UP
, NUM_ROWS
, BLOCKS
, EMPTY_BLOCKS
, AVG_SPACE
, CHAIN_CNT
, AVG_ROW_LEN
, AVG_SPACE_FREELIST_BLOCKS
, NUM_FREELIST_BLOCKS
, DEGREE
, INSTANCES
, CACHE
, TABLE_LOCK
, SAMPLE_SIZE
, LAST_ANALYZED
, PARTITIONED
, IOT_TYPE
, TEMPORARY
, SECONDARY
, NESTED
, BUFFER_POOL
, FLASH_CACHE
, CELL_FLASH_CACHE
, ROW_MOVEMENT
, GLOBAL_STATS
, USER_STATS
, DURATION
, SKIP_CORRUPT
, MONITORING
, CLUSTER_OWNER
, DEPENDENCIES
, COMPRESSION
, COMPRESS_FOR
, COLUMN_COUNT
)
SELECT 
  JOB_TASK_DEMO_TAB02.OWNER
, JOB_TASK_DEMO_TAB02.TABLE_NAME
, TABLESPACE_NAME
, CLUSTER_NAME
, IOT_NAME
, STATUS
, PCT_FREE
, PCT_USED
, INI_TRANS
, MAX_TRANS
, INITIAL_EXTENT
, NEXT_EXTENT
, MIN_EXTENTS
, MAX_EXTENTS
, PCT_INCREASE
, FREELISTS
, FREELIST_GROUPS
, LOGGING
, BACKED_UP
, NUM_ROWS
, BLOCKS
, EMPTY_BLOCKS
, AVG_SPACE
, CHAIN_CNT
, AVG_ROW_LEN
, AVG_SPACE_FREELIST_BLOCKS
, NUM_FREELIST_BLOCKS
, DEGREE
, INSTANCES
, CACHE
, TABLE_LOCK
, SAMPLE_SIZE
, LAST_ANALYZED
, PARTITIONED
, IOT_TYPE
, TEMPORARY
, SECONDARY
, NESTED
, BUFFER_POOL
, FLASH_CACHE
, CELL_FLASH_CACHE
, ROW_MOVEMENT
, GLOBAL_STATS
, USER_STATS
, DURATION
, SKIP_CORRUPT
, MONITORING
, CLUSTER_OWNER
, DEPENDENCIES
, COMPRESSION
, COMPRESS_FOR
, T3.COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB02
  LEFT
  JOIN ( SELECT OWNER, TABLE_NAME, COUNT(*) AS COLUMN_COUNT
           FROM JOB_TASK_DEMO_TAB03
          GROUP BY OWNER, TABLE_NAME
       ) T3
    ON JOB_TASK_DEMO_TAB02.OWNER = T3.OWNER
   AND JOB_TASK_DEMO_TAB02.TABLE_NAME = T3.TABLE_NAME
 WHERE 1=1
}';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB04"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);

END job_task_demo_tab04_p;



PROCEDURE job_task_demo_tab05_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab05';
   
   EXECUTE IMMEDIATE 
Q'{
INSERT 
  INTO job_task_demo_tab05
     (
  OWNER
, OBJECT_NAME
, SUBOBJECT_NAME
, OBJECT_ID
, DATA_OBJECT_ID
, OBJECT_TYPE
, CREATED
, LAST_DDL_TIME
, TIMESTAMP
, STATUS
, TEMPORARY
, GENERATED
, SECONDARY
, NAMESPACE
, EDITION_NAME
, COLUMN_COUNT
     )
   SELECT 
  T1.OWNER
, T1.OBJECT_NAME
, T1.SUBOBJECT_NAME
, T1.OBJECT_ID
, T1.DATA_OBJECT_ID
, T1.OBJECT_TYPE
, T1.CREATED
, T1.LAST_DDL_TIME
, T1.TIMESTAMP
, T1.STATUS
, T1.TEMPORARY
, T1.GENERATED
, T1.SECONDARY
, T1.NAMESPACE
, T1.EDITION_NAME
, T4.COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB01 T1
  LEFT
  JOIN JOB_TASK_DEMO_TAB04 T4
    ON T1.OWNER = T4.OWNER
   AND T1.OBJECT_NAME = T4.TABLE_NAME
   AND T1.OBJECT_TYPE = 'TABLE'
}';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB05"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);
   
END job_task_demo_tab05_p;



PROCEDURE job_task_demo_tab06_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab06';
   
   EXECUTE IMMEDIATE 
Q'{
INSERT 
  INTO job_task_demo_tab06
     (
  OWNER
, ROW_CNT
, TABLE_CNT
, COLUMN_COUNT
     )
SELECT OWNER
, COUNT(*) AS ROW_CNT
, COUNT(DISTINCT TABLE_NAME) AS TABLE_CNT
, SUM(COLUMN_COUNT) AS COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB04
GROUP BY OWNER
}';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB06"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);
   
END job_task_demo_tab06_p;



PROCEDURE job_task_demo_tab07_p(op_rows_processed OUT NUMBER)
IS
BEGIN
   EXECUTE IMMEDIATE 'TRUNCATE TABLE job_task_demo_tab07';
   
   EXECUTE IMMEDIATE 
Q'{
INSERT 
  INTO job_task_demo_tab07
     (
  TABLESPACE_NAME
, COLUMN_COUNT
     )
SELECT 
  TABLESPACE_NAME
 , SUM(COLUMN_COUNT) AS COLUMN_COUNT
  FROM JOB_TASK_DEMO_TAB04
GROUP BY TABLESPACE_NAME
}';

   op_rows_processed := SQL%ROWCOUNT;

   COMMIT;

   DBMS_STATS.GATHER_TABLE_STATS (
      ownname => SYS_CONTEXT('USERENV','CURRENT_USER'),
      tabname => '"JOB_TASK_DEMO_TAB07"',
      estimate_percent => 5);

   DBMS_SESSION.SLEEP(c_end_of_proc_sleep_secs);
   
END job_task_demo_tab07_p;


END PKG_JOB_TASK_DEMO;
/
